import org.gradle.internal.os.OperatingSystem

import java.nio.file.Files;

group 'ro.mirceanistor.stf'
version '0.2'

apply plugin: 'groovy'

repositories {
    jcenter()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile "commons-cli:commons-cli:1.3.1"

    compile 'org.codehaus.groovy:groovy:2.4.7'
    compile 'org.codehaus.groovy:groovy-xml:2.4.7'
    compile 'org.codehaus.groovy:groovy-json:2.4.7'

    compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7'
}

def mainClassName = "${group}.MainClass"

/**
 * create a single Jar with all dependencies
 */
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'stf connection tool',
                'Implementation-Version': version,
                'Main-Class': mainClassName
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar

    artifacts.add('archives', tasks["fatJar"])
}

/**
 * Run the installation task to add te newly created `stf` executable to `$HOME/.local/bin`
 * Probably won't work on windows
 */
task install(dependsOn: fatJar) {
    outputs.upToDateWhen { false }
    doLast {
        configurations.archives.allArtifacts.each {
            if (it.name == "${project.name}-all".toString()) {

                def installDir = "${System.getProperty("user.home")}/.local/stf-connect"
                def jarName = it.getFile().name
                def jarLocation = "$installDir/$jarName"
                def installLocation = "$installDir/stfc"
                def artifactLocation = it.getFile()
                def symlinkPath = new File("${System.getProperty("user.home")}/.local/bin/stfc").toPath()

                copy {
                    from "$artifactLocation"
                    into "$installDir"
                }

                if (OperatingSystem.current().isWindows()) {
                    //create bat bootstrap
                    def batStrap = new File("${installLocation}.bat")
                    batStrap.text = "@echo off\n"
                    batStrap.text += "java -jar \"${jarLocation}\" \"%*\""
                    //the user will have to add this to PATH
                    logger.lifecycle("Created bat bootstrap in ${installDir}.\n\n" +
                            "If you want global access to this tool, add ${installDir} to your PATH")

                } else {
                    //create bash bootstrap
                    def bashStrap = new File(installLocation)
                    bashStrap.text = "#!/bin/bash\n"
                    bashStrap.text += "java -jar \"${jarLocation}\" \"\$@\""
                    bashStrap.setExecutable(true, true)
                    //symlink to the bash script
                    Files.delete(symlinkPath)
                    Files.createSymbolicLink(symlinkPath, new File(installLocation).toPath())

                    logger.lifecycle("\nCreated \"stfc\" bootstrap in \"${installDir}\".\n" +
                            "Add it to your PATH if you want global access")
                }


            } else {
                logger.debug "skipping installation for thin archive ${it.getFile()}"
            }
        }
    }
}